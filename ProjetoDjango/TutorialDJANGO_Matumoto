Passo a passo


PERGUNTAR SOBRE POETRY E PYENV NOVAMENTE 
==========================================
POSTGRES

sudo -u postgres -i


PYENV - https://blog.accurate.com.br/tutorial-pyenv/
para entrar no 
pyenv versions 
pyenv shell [versão]
lista as versões instaladas

para colocar na pasta local, colocar 
pyenv local [versão]poetry 
poetry shell
poetry - ambiente virtual

pyenv - sistema 
poetry - instala em cada versão, é o ambiente virtual
==========================================


# Para lembrar 
IMPORTS!!!!!!!


1 - ver se poetry está instalado
poetry -m django --version


2 - criar o projeto a partir de um template
django-admin startproject mysite
	mysite pode ser reescrito
	__init__ -> fala que é um python
	
	2.1 - Criar arquivo 
	config.py 
	(decouple) com padrão NOME = config('NOME') e trocar SECRET_KEY e DEBUG, ALLOWED_HOSTS
	.env 
	NOME=Joao
	...
	
	2.2 - Database definir como - 
	DATABASES = {
    	'default': {
		"ENGINE": "django.db.backends.postgresql",
		"NAME": config.DB_NAME,
		"USER": config.DB_USER,
		"PASSWORD": config.DB_PASSWORD,
		"HOST": config.DB_HOST,
		"PORT": config.DB_PORT,
        
    		}
	}
	2.3 - Timezone e linguagem - pt-BR e America/Sao_Paulo

3 - rodando o servidor pela primeira vez 
python manage.py runserver
	é possivel mudar a porta
	teste em http://127.0.0.1:8000/

4 - Iniciando aplicação (veja se está no mesmo diretório)
	python manage.py startapp [nomedoprojeto]

5 - Criar visuais (views.py)
	
6 - Criar URLS.py no app

7 - Dar os padrões de URL no site

SEMPRE DAR RUNSERVER PARA TESTAR

8 - Configurar os databases
python manage.py migrate
	
9 - Criar modelos - exemplos:

	class Question(models.Model):
	    question_text = models.CharField(max_length=200)
	    pub_date = models.DateTimeField("date published")

	class Choice(models.Model):
	    question = models.ForeignKey(Question, on_delete=models.CASCADE)
	    choice_text = models.CharField(max_length=200)
	    votes = models.IntegerField(default=0)
  
10 - Adicionar isso aos Installed apps
	"nomeapp.apps.PollsConfig"

11 - Fazer migração
python manage.py makemigrations polls
VER SE DEU CERTO - python manage.py sqlmigrate polls 0001

12 - Se sim, migrar
python manage.py migrate

13 - API!
	13.1 - importar modelos 
	from polls.models import Choice, Question
	Question.objects.all() - vê todos os objetos
	q = Question(question_text="What's new?", pub_date=timezone.now())
	q.save()
	q.id

14 - colocar construtores para string nos modelos (DENTRO DA CLASSE)
	def __str__(self):
		return self.campo
	testar retornando e fazendo o processo do passo 13
	q = Question.objects.get(pk=1)
	q.choice_set.create(choice_text="",votes=0) #colocando item nas questões
	q.choice_set.all() - ver todos os campos
	# para deletar
	c = q.choice_set.filter(choice_text__startswith="Just hacking")
	c.delete()

15 - Criar admin 
python manage.py createsuperuser
rode o servidor e teste com o /admin
adicionar admin para poder modificar
admin.site.register(Question)

16 - Escrever mais telas 

sempre no modelo 

(views)
def detail(request, question_id):
    return HttpResponse("You're looking at question %s." % question_id)

(urls)
nos patterns -> path("<int:question_id>/", views.detail, name="detail")
sempre ir testando conforme for mudando as telas

===============================================
telas que mostram algo
def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    output = ", ".join([q.question_text for q in latest_question_list])
    return HttpResponse(output)
===============================================

17 - dentro do app, podemos criar templates para cada coisa, crie uma pasta no diretório do arquivo
e dentro, o nome novamente, daí o arquivo html base

exemplos 

{% if latest_question_list %}
    <ul>
    {% for question in latest_question_list %}
        <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No polls are available.</p>
    
    
 uso na tela
 
 def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    template = loader.get_template("polls/index.html")
    context = {
        "latest_question_list": latest_question_list,
    }
    return HttpResponse(template.render(context, request))
{% endif %}

------ shortcut com render ---------
def index(request):
    latest_question_list = Question.objects.order_by("-pub_date")[:5]
    context = {"latest_question_list": latest_question_list}
    return render(request, "polls/index.html", context)
    
18 - lidando com erros (404!)

def detail(request, question_id):
    try:
        question = Question.objects.get(pk=question_id)
    except Question.DoesNotExist:
        raise Http404("Question does not exist")
    return render(request, "polls/detail.html", {"question": question})
    
 ------ shortcut com get ---------
 def detail(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    return render(request, "polls/detail.html", {"question": question})

19 - Tirar os hardcodes
<li><a href="{% url '[NOMEDADO]:detail' question.id %}">{{ question.question_text }}</a></li>

	
======== TIRAR UM POUCO DE CÓDIGO ==========
app_name = "NOMEDADO"

urlpatterns = [
    path("", views.index, name="index"),
    path("<int:question_id>/", views.detail, name="detail"),
    path("<int:question_id>/results/", views.results, name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

urlpatterns = [
    path("", views.IndexView.as_view(), name="index"),
    path("<int:pk>/", views.DetailView.as_view(), name="detail"),
    path("<int:pk>/results/", views.ResultsView.as_view(), name="results"),
    path("<int:question_id>/vote/", views.vote, name="vote"),
]

20 - Testando 
se ver um bug, criar uma classe para tests.py


	

